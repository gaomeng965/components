{
  "remainingRequest": "/Users/nimengge/Documents/workSpace/组件库模块/gm-design/node_modules/thread-loader/dist/cjs.js??ref--11-1!/Users/nimengge/Documents/workSpace/组件库模块/gm-design/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--11-2!/Users/nimengge/Documents/workSpace/组件库模块/gm-design/node_modules/source-map-loader/index.js!/Users/nimengge/Documents/workSpace/组件库模块/gm-design/src/serviceWorker.ts",
  "dependencies": [
    {
      "path": "/Users/nimengge/Documents/workSpace/组件库模块/gm-design/src/serviceWorker.ts",
      "mtime": 1588143818373
    },
    {
      "path": "/Users/nimengge/Documents/workSpace/组件库模块/gm-design/node_modules/cache-loader/dist/cjs.js",
      "mtime": 1577068151710
    },
    {
      "path": "/Users/nimengge/Documents/workSpace/组件库模块/gm-design/node_modules/thread-loader/dist/cjs.js",
      "mtime": 1587521189508
    },
    {
      "path": "/Users/nimengge/Documents/workSpace/组件库模块/gm-design/node_modules/docz-core/node_modules/babel-loader/lib/index.js",
      "mtime": 1587520293439
    },
    {
      "path": "/Users/nimengge/Documents/workSpace/组件库模块/gm-design/node_modules/source-map-loader/index.js",
      "mtime": 1577360585215
    }
  ],
  "contextDependencies": [],
  "result": [
    {
      "type": "Buffer",
      "data": "base64:KGZ1bmN0aW9uICgpIHsKICB2YXIgZW50ZXJNb2R1bGUgPSB0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWwuZW50ZXJNb2R1bGUgOiB1bmRlZmluZWQ7CiAgZW50ZXJNb2R1bGUgJiYgZW50ZXJNb2R1bGUobW9kdWxlKTsKfSkoKTsKCnZhciBfX3NpZ25hdHVyZV9fID0gdHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsLmRlZmF1bHQuc2lnbmF0dXJlIDogZnVuY3Rpb24gKGEpIHsKICByZXR1cm4gYTsKfTsKCi8vIFRoaXMgb3B0aW9uYWwgY29kZSBpcyB1c2VkIHRvIHJlZ2lzdGVyIGEgc2VydmljZSB3b3JrZXIuCi8vIHJlZ2lzdGVyKCkgaXMgbm90IGNhbGxlZCBieSBkZWZhdWx0LgovLyBUaGlzIGxldHMgdGhlIGFwcCBsb2FkIGZhc3RlciBvbiBzdWJzZXF1ZW50IHZpc2l0cyBpbiBwcm9kdWN0aW9uLCBhbmQgZ2l2ZXMKLy8gaXQgb2ZmbGluZSBjYXBhYmlsaXRpZXMuIEhvd2V2ZXIsIGl0IGFsc28gbWVhbnMgdGhhdCBkZXZlbG9wZXJzIChhbmQgdXNlcnMpCi8vIHdpbGwgb25seSBzZWUgZGVwbG95ZWQgdXBkYXRlcyBvbiBzdWJzZXF1ZW50IHZpc2l0cyB0byBhIHBhZ2UsIGFmdGVyIGFsbCB0aGUKLy8gZXhpc3RpbmcgdGFicyBvcGVuIG9uIHRoZSBwYWdlIGhhdmUgYmVlbiBjbG9zZWQsIHNpbmNlIHByZXZpb3VzbHkgY2FjaGVkCi8vIHJlc291cmNlcyBhcmUgdXBkYXRlZCBpbiB0aGUgYmFja2dyb3VuZC4KLy8gVG8gbGVhcm4gbW9yZSBhYm91dCB0aGUgYmVuZWZpdHMgb2YgdGhpcyBtb2RlbCBhbmQgaW5zdHJ1Y3Rpb25zIG9uIGhvdyB0bwovLyBvcHQtaW4sIHJlYWQgaHR0cHM6Ly9iaXQubHkvQ1JBLVBXQQpjb25zdCBpc0xvY2FsaG9zdCA9IEJvb2xlYW4od2luZG93LmxvY2F0aW9uLmhvc3RuYW1lID09PSAnbG9jYWxob3N0JyB8fCAvLyBbOjoxXSBpcyB0aGUgSVB2NiBsb2NhbGhvc3QgYWRkcmVzcy4Kd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lID09PSAnWzo6MV0nIHx8IC8vIDEyNy4wLjAuMC84IGFyZSBjb25zaWRlcmVkIGxvY2FsaG9zdCBmb3IgSVB2NC4Kd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lLm1hdGNoKC9eMTI3KD86XC4oPzoyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pKXszfSQvKSk7CmV4cG9ydCBmdW5jdGlvbiByZWdpc3Rlcihjb25maWcpIHsKICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyAmJiAnc2VydmljZVdvcmtlcicgaW4gbmF2aWdhdG9yKSB7CiAgICAvLyBUaGUgVVJMIGNvbnN0cnVjdG9yIGlzIGF2YWlsYWJsZSBpbiBhbGwgYnJvd3NlcnMgdGhhdCBzdXBwb3J0IFNXLgogICAgY29uc3QgcHVibGljVXJsID0gbmV3IFVSTChwcm9jZXNzLmVudi5QVUJMSUNfVVJMLCB3aW5kb3cubG9jYXRpb24uaHJlZik7CgogICAgaWYgKHB1YmxpY1VybC5vcmlnaW4gIT09IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4pIHsKICAgICAgLy8gT3VyIHNlcnZpY2Ugd29ya2VyIHdvbid0IHdvcmsgaWYgUFVCTElDX1VSTCBpcyBvbiBhIGRpZmZlcmVudCBvcmlnaW4KICAgICAgLy8gZnJvbSB3aGF0IG91ciBwYWdlIGlzIHNlcnZlZCBvbi4gVGhpcyBtaWdodCBoYXBwZW4gaWYgYSBDRE4gaXMgdXNlZCB0bwogICAgICAvLyBzZXJ2ZSBhc3NldHM7IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svY3JlYXRlLXJlYWN0LWFwcC9pc3N1ZXMvMjM3NAogICAgICByZXR1cm47CiAgICB9CgogICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7CiAgICAgIGNvbnN0IHN3VXJsID0gYCR7cHJvY2Vzcy5lbnYuUFVCTElDX1VSTH0vc2VydmljZS13b3JrZXIuanNgOwoKICAgICAgaWYgKGlzTG9jYWxob3N0KSB7CiAgICAgICAgLy8gVGhpcyBpcyBydW5uaW5nIG9uIGxvY2FsaG9zdC4gTGV0J3MgY2hlY2sgaWYgYSBzZXJ2aWNlIHdvcmtlciBzdGlsbCBleGlzdHMgb3Igbm90LgogICAgICAgIGNoZWNrVmFsaWRTZXJ2aWNlV29ya2VyKHN3VXJsLCBjb25maWcpOyAvLyBBZGQgc29tZSBhZGRpdGlvbmFsIGxvZ2dpbmcgdG8gbG9jYWxob3N0LCBwb2ludGluZyBkZXZlbG9wZXJzIHRvIHRoZQogICAgICAgIC8vIHNlcnZpY2Ugd29ya2VyL1BXQSBkb2N1bWVudGF0aW9uLgoKICAgICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWFkeS50aGVuKCgpID0+IHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdUaGlzIHdlYiBhcHAgaXMgYmVpbmcgc2VydmVkIGNhY2hlLWZpcnN0IGJ5IGEgc2VydmljZSAnICsgJ3dvcmtlci4gVG8gbGVhcm4gbW9yZSwgdmlzaXQgaHR0cHM6Ly9iaXQubHkvQ1JBLVBXQScpOwogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIElzIG5vdCBsb2NhbGhvc3QuIEp1c3QgcmVnaXN0ZXIgc2VydmljZSB3b3JrZXIKICAgICAgICByZWdpc3RlclZhbGlkU1coc3dVcmwsIGNvbmZpZyk7CiAgICAgIH0KICAgIH0pOwogIH0KfQoKaWYgKHR5cGVvZiByZWdpc3RlciAhPT0gJ3VuZGVmaW5lZCcgJiYgcmVnaXN0ZXIgJiYgcmVnaXN0ZXIgPT09IE9iamVjdChyZWdpc3RlcikgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShyZWdpc3RlcikpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVnaXN0ZXIsICdfX2ZpbGVtZXRhJywgewogICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgIHZhbHVlOiB7CiAgICAgIG5hbWU6ICJyZWdpc3RlciIsCiAgICAgIGZpbGVuYW1lOiAic3JjL3NlcnZpY2VXb3JrZXIudHMiCiAgICB9CiAgfSk7Cn0KCmZ1bmN0aW9uIHJlZ2lzdGVyVmFsaWRTVyhzd1VybCwgY29uZmlnKSB7CiAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVnaXN0ZXIoc3dVcmwpLnRoZW4ocmVnaXN0cmF0aW9uID0+IHsKICAgIHJlZ2lzdHJhdGlvbi5vbnVwZGF0ZWZvdW5kID0gKCkgPT4gewogICAgICBjb25zdCBpbnN0YWxsaW5nV29ya2VyID0gcmVnaXN0cmF0aW9uLmluc3RhbGxpbmc7CgogICAgICBpZiAoaW5zdGFsbGluZ1dvcmtlciA9PSBudWxsKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpbnN0YWxsaW5nV29ya2VyLm9uc3RhdGVjaGFuZ2UgPSAoKSA9PiB7CiAgICAgICAgaWYgKGluc3RhbGxpbmdXb3JrZXIuc3RhdGUgPT09ICdpbnN0YWxsZWQnKSB7CiAgICAgICAgICBpZiAobmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuY29udHJvbGxlcikgewogICAgICAgICAgICAvLyBBdCB0aGlzIHBvaW50LCB0aGUgdXBkYXRlZCBwcmVjYWNoZWQgY29udGVudCBoYXMgYmVlbiBmZXRjaGVkLAogICAgICAgICAgICAvLyBidXQgdGhlIHByZXZpb3VzIHNlcnZpY2Ugd29ya2VyIHdpbGwgc3RpbGwgc2VydmUgdGhlIG9sZGVyCiAgICAgICAgICAgIC8vIGNvbnRlbnQgdW50aWwgYWxsIGNsaWVudCB0YWJzIGFyZSBjbG9zZWQuCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdOZXcgY29udGVudCBpcyBhdmFpbGFibGUgYW5kIHdpbGwgYmUgdXNlZCB3aGVuIGFsbCAnICsgJ3RhYnMgZm9yIHRoaXMgcGFnZSBhcmUgY2xvc2VkLiBTZWUgaHR0cHM6Ly9iaXQubHkvQ1JBLVBXQS4nKTsgLy8gRXhlY3V0ZSBjYWxsYmFjawoKICAgICAgICAgICAgaWYgKGNvbmZpZyAmJiBjb25maWcub25VcGRhdGUpIHsKICAgICAgICAgICAgICBjb25maWcub25VcGRhdGUocmVnaXN0cmF0aW9uKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gQXQgdGhpcyBwb2ludCwgZXZlcnl0aGluZyBoYXMgYmVlbiBwcmVjYWNoZWQuCiAgICAgICAgICAgIC8vIEl0J3MgdGhlIHBlcmZlY3QgdGltZSB0byBkaXNwbGF5IGEKICAgICAgICAgICAgLy8gIkNvbnRlbnQgaXMgY2FjaGVkIGZvciBvZmZsaW5lIHVzZS4iIG1lc3NhZ2UuCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdDb250ZW50IGlzIGNhY2hlZCBmb3Igb2ZmbGluZSB1c2UuJyk7IC8vIEV4ZWN1dGUgY2FsbGJhY2sKCiAgICAgICAgICAgIGlmIChjb25maWcgJiYgY29uZmlnLm9uU3VjY2VzcykgewogICAgICAgICAgICAgIGNvbmZpZy5vblN1Y2Nlc3MocmVnaXN0cmF0aW9uKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfTsKICAgIH07CiAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgY29uc29sZS5lcnJvcignRXJyb3IgZHVyaW5nIHNlcnZpY2Ugd29ya2VyIHJlZ2lzdHJhdGlvbjonLCBlcnJvcik7CiAgfSk7Cn0KCmZ1bmN0aW9uIGNoZWNrVmFsaWRTZXJ2aWNlV29ya2VyKHN3VXJsLCBjb25maWcpIHsKICAvLyBDaGVjayBpZiB0aGUgc2VydmljZSB3b3JrZXIgY2FuIGJlIGZvdW5kLiBJZiBpdCBjYW4ndCByZWxvYWQgdGhlIHBhZ2UuCiAgZmV0Y2goc3dVcmwsIHsKICAgIGhlYWRlcnM6IHsKICAgICAgJ1NlcnZpY2UtV29ya2VyJzogJ3NjcmlwdCcKICAgIH0KICB9KS50aGVuKHJlc3BvbnNlID0+IHsKICAgIC8vIEVuc3VyZSBzZXJ2aWNlIHdvcmtlciBleGlzdHMsIGFuZCB0aGF0IHdlIHJlYWxseSBhcmUgZ2V0dGluZyBhIEpTIGZpbGUuCiAgICBjb25zdCBjb250ZW50VHlwZSA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKTsKCiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDQgfHwgY29udGVudFR5cGUgIT0gbnVsbCAmJiBjb250ZW50VHlwZS5pbmRleE9mKCdqYXZhc2NyaXB0JykgPT09IC0xKSB7CiAgICAgIC8vIE5vIHNlcnZpY2Ugd29ya2VyIGZvdW5kLiBQcm9iYWJseSBhIGRpZmZlcmVudCBhcHAuIFJlbG9hZCB0aGUgcGFnZS4KICAgICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVhZHkudGhlbihyZWdpc3RyYXRpb24gPT4gewogICAgICAgIHJlZ2lzdHJhdGlvbi51bnJlZ2lzdGVyKCkudGhlbigoKSA9PiB7CiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfSBlbHNlIHsKICAgICAgLy8gU2VydmljZSB3b3JrZXIgZm91bmQuIFByb2NlZWQgYXMgbm9ybWFsLgogICAgICByZWdpc3RlclZhbGlkU1coc3dVcmwsIGNvbmZpZyk7CiAgICB9CiAgfSkuY2F0Y2goKCkgPT4gewogICAgY29uc29sZS5sb2coJ05vIGludGVybmV0IGNvbm5lY3Rpb24gZm91bmQuIEFwcCBpcyBydW5uaW5nIGluIG9mZmxpbmUgbW9kZS4nKTsKICB9KTsKfQoKZXhwb3J0IGZ1bmN0aW9uIHVucmVnaXN0ZXIoKSB7CiAgaWYgKCdzZXJ2aWNlV29ya2VyJyBpbiBuYXZpZ2F0b3IpIHsKICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlYWR5LnRoZW4ocmVnaXN0cmF0aW9uID0+IHsKICAgICAgcmVnaXN0cmF0aW9uLnVucmVnaXN0ZXIoKTsKICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgY29uc29sZS5lcnJvcihlcnJvci5tZXNzYWdlKTsKICAgIH0pOwogIH0KfQoKaWYgKHR5cGVvZiB1bnJlZ2lzdGVyICE9PSAndW5kZWZpbmVkJyAmJiB1bnJlZ2lzdGVyICYmIHVucmVnaXN0ZXIgPT09IE9iamVjdCh1bnJlZ2lzdGVyKSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKHVucmVnaXN0ZXIpKSB7CiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHVucmVnaXN0ZXIsICdfX2ZpbGVtZXRhJywgewogICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgIHZhbHVlOiB7CiAgICAgIG5hbWU6ICJ1bnJlZ2lzdGVyIiwKICAgICAgZmlsZW5hbWU6ICJzcmMvc2VydmljZVdvcmtlci50cyIKICAgIH0KICB9KTsKfQoKOwoKKGZ1bmN0aW9uICgpIHsKICB2YXIgcmVhY3RIb3RMb2FkZXIgPSB0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWwuZGVmYXVsdCA6IHVuZGVmaW5lZDsKCiAgaWYgKCFyZWFjdEhvdExvYWRlcikgewogICAgcmV0dXJuOwogIH0KCiAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIoaXNMb2NhbGhvc3QsICJpc0xvY2FsaG9zdCIsICIvVXNlcnMvbmltZW5nZ2UvRG9jdW1lbnRzL3dvcmtTcGFjZS9cdTdFQzRcdTRFRjZcdTVFOTNcdTZBMjFcdTU3NTcvbmNwLWRlc2lnbi9zcmMvc2VydmljZVdvcmtlci50cyIpOwogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKHJlZ2lzdGVyLCAicmVnaXN0ZXIiLCAiL1VzZXJzL25pbWVuZ2dlL0RvY3VtZW50cy93b3JrU3BhY2UvXHU3RUM0XHU0RUY2XHU1RTkzXHU2QTIxXHU1NzU3L25jcC1kZXNpZ24vc3JjL3NlcnZpY2VXb3JrZXIudHMiKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihyZWdpc3RlclZhbGlkU1csICJyZWdpc3RlclZhbGlkU1ciLCAiL1VzZXJzL25pbWVuZ2dlL0RvY3VtZW50cy93b3JrU3BhY2UvXHU3RUM0XHU0RUY2XHU1RTkzXHU2QTIxXHU1NzU3L25jcC1kZXNpZ24vc3JjL3NlcnZpY2VXb3JrZXIudHMiKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihjaGVja1ZhbGlkU2VydmljZVdvcmtlciwgImNoZWNrVmFsaWRTZXJ2aWNlV29ya2VyIiwgIi9Vc2Vycy9uaW1lbmdnZS9Eb2N1bWVudHMvd29ya1NwYWNlL1x1N0VDNFx1NEVGNlx1NUU5M1x1NkEyMVx1NTc1Ny9uY3AtZGVzaWduL3NyYy9zZXJ2aWNlV29ya2VyLnRzIik7CiAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIodW5yZWdpc3RlciwgInVucmVnaXN0ZXIiLCAiL1VzZXJzL25pbWVuZ2dlL0RvY3VtZW50cy93b3JrU3BhY2UvXHU3RUM0XHU0RUY2XHU1RTkzXHU2QTIxXHU1NzU3L25jcC1kZXNpZ24vc3JjL3NlcnZpY2VXb3JrZXIudHMiKTsKfSkoKTsKCjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIGxlYXZlTW9kdWxlID0gdHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsLmxlYXZlTW9kdWxlIDogdW5kZWZpbmVkOwogIGxlYXZlTW9kdWxlICYmIGxlYXZlTW9kdWxlKG1vZHVsZSk7Cn0pKCk7"
    },
    {
      "version": 3,
      "sources": ["/Users/nimengge/Documents/workSpace/组件库模块/gm-design/src/serviceWorker.ts"],
      "names": [
        "isLocalhost",
        "Boolean",
        "window",
        "location",
        "hostname",
        "match",
        "register",
        "config",
        "process",
        "env",
        "NODE_ENV",
        "navigator",
        "publicUrl",
        "URL",
        "PUBLIC_URL",
        "href",
        "origin",
        "addEventListener",
        "swUrl",
        "checkValidServiceWorker",
        "serviceWorker",
        "ready",
        "then",
        "console",
        "log",
        "registerValidSW",
        "registration",
        "onupdatefound",
        "installingWorker",
        "installing",
        "onstatechange",
        "state",
        "controller",
        "onUpdate",
        "onSuccess",
        "catch",
        "error",
        "fetch",
        "headers",
        "response",
        "contentType",
        "get",
        "status",
        "indexOf",
        "unregister",
        "reload",
        "message"
      ],
      "mappings": "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",
      "sourcesContent": [
        "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"
      ]
    }
  ]
}
